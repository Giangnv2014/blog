{"name":"Blog","tagline":"","body":"### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here using GitHub Flavored Markdown, select a template crafted by a designer, and publish. After your page is generated, you can check out the new branch:\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at https://help.github.com/pages or contact support@github.com and we’ll help you sort it out.\r\n## Giới thiệu tổng quan\r\n- AngularJS là một JavaScript framwork được phát triển bởi Google, nó là mã nguồn mở và hoàn toàn miễn phí chính vì thế có rất nhiều tài liệu cũng như hướng dẫn cho việc tìm hiểu AngularJS. Trong loạt bài này mình sẽ tổng hợp lại những kiến thức cơ bản nhất về AngularJS để các bạn tiện theo dõi và cùng nhau tìm hiểu những điều hay ho của AngularJS, lý do tại sao nó trở nên phổ biến như hiện nay.\r\n- Trước khi tìm hiểu `AngularJS` mình đã được khuyến cáo cần có những kiến thức cơ bản nhất về `html`, `css`, `Javascript`,.. rồi mới bắt đầu. Nếu đây là lần đầu bạn làm quen với web, với `javascript` thì nên dừng lại ở đây và ngâm cứu `javascript` căn bản rồi quay lại nhé. Còn nếu bạn đã làm web lâu năm, có những hiểu biết nhất định về `javascript` thì còn chần chừ gì nữa, chúng ta bắt đầu thôi.\r\n- `AngularJS` là framwork dành cho xây dựng ứng dụng web động, hoạt động theo mô hình MVC, nó cho phép bạn sử dụng `HTML` như là template và thêm vào các thuộc tính mở rộng `HTML` theo quy tắc của `AngularJS` để diễn tả các thành phần của ứng dụng một cách rõ ràng và ngắn gọn.\r\n- Các thành phần chính của `AugularJS`:\r\n| Khái niệm  | Mô tả  |\r\n|---|---|\r\n| Template  | Sử dụng ngôn ngữ HTML  |\r\n| Directives  | Cho phép mở rộng HTML và bạn có thể custom lại các thuộc tính, phần tử (elements)   |\r\n| Model  | Lưu trữ dữ liệu và hiển thị ra ngoài view của người dùng khi có 1 tương tác nào đó  |\r\n| Scope  | Điểm trung gian, làm nhiệm vụ giao tiếp giữa model, controller, service, view,..  |\r\n| Expressions  | Truy cập vào các biến và function từ scope  |\r\n| Compiler  | parses template and khởi tạo directives và expressions  |\r\n| Filter  | Bộ lọc, format lại dữ liệu hiển thị ra ngoài view người dùng  |\r\n| View  | Những gì người dùng có thể thấy được  |\r\n| Data Binding  | chuyển đổi dữ liệu giữa model và view  |\r\n| Controller  | Lớp business logic phía sau views  |\r\n| Dependency Injection  | Tạo, liên kết, thống nhất các đối tượng và chức năng  |\r\n| Injector  | Chứa dependency injection  |\r\n| Module  | Cũng giống như các framework khác, module như thùng chứa các thứ như là controller, service, directives,…  |\r\n| Service  | Xây dựng service, mục đích là tái sử dụng lại các phương thức chung có thể sử dụng ở nhiều view hay controller khác nhau  |","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}